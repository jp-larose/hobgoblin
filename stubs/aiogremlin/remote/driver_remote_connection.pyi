from aiogremlin.driver.cluster import Cluster as Cluster
from aiogremlin.remote.driver_remote_side_effects import AsyncRemoteTraversalSideEffects as AsyncRemoteTraversalSideEffects
from typing import Any, Optional

class DriverRemoteConnection:

    def __init__(self, client: Any, loop: Any, *, cluster: Optional[Any] = ...) -> None: ...

    @property
    def client(self): ...

    @property
    def config(self): ...

    @classmethod
    async def using(cls, cluster: Any, aliases: Optional[Any] = ...): ...

    @classmethod
    async def open(cls, url: Optional[Any] = ..., aliases: Optional[Any] = ..., loop: Optional[Any] = ..., *,
                   graphson_reader: Optional[Any] = ..., graphson_writer: Optional[Any] = ..., **config: Any): ...

    async def close(self) -> None: ...

    async def submit(self, bytecode: Any): ...

    async def __aenter__(self): ...

    async def __aexit__(self, exc_type: Any, exc: Any, tb: Any) -> None: ...
