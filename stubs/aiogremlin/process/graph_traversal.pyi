from aiogremlin.process.traversal import AsyncTraversalStrategies as AsyncTraversalStrategies
from aiogremlin.remote.remote_connection import AsyncRemoteStrategy as AsyncRemoteStrategy
from gremlin_python.process import graph_traversal
from typing import Any, Optional

class AsyncGraphTraversal(graph_traversal.GraphTraversal):

    def __aiter__(self): ...

    last_traverser: Any = ...

    async def __anext__(self): ...

    async def toList(self): ...

    async def toSet(self): ...

    async def iterate(self): ...

    async def nextTraverser(self): ...

    async def next(self, amount: Optional[Any] = ...): ...

class __(graph_traversal.__):
    graph_traversal: Any = ...

class AsyncGraphTraversalSource(graph_traversal.GraphTraversalSource):
    graph_traversal: Any = ...

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

    def withRemote(self, remote_connection: Any): ...

    def get_graph_traversal_source(self): ...
